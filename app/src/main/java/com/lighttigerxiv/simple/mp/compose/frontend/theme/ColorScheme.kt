package com.lighttigerxiv.simple.mp.compose.frontend.theme

import androidx.compose.material3.ColorScheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.ui.graphics.Color

val LightBlueColors = lightColorScheme(
    primary = AppTheme.Blue.Light.PRIMARY,
    onPrimary = AppTheme.Blue.Light.ON_PRIMARY,
    primaryContainer = AppTheme.Blue.Light.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Blue.Light.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Blue.Light.SECONDARY,
    onSecondary = AppTheme.Blue.Light.ON_SECONDARY,
    secondaryContainer = AppTheme.Blue.Light.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Blue.Light.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Blue.Light.TERTIARY,
    onTertiary = AppTheme.Blue.Light.ON_TERTIARY,
    tertiaryContainer = AppTheme.Blue.Light.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Blue.Light.ON_TERTIARY_CONTAINER,
    error = AppTheme.Blue.Light.ERROR,
    errorContainer = AppTheme.Blue.Light.ERROR_CONTAINER,
    onError = AppTheme.Blue.Light.ON_ERROR,
    onErrorContainer = AppTheme.Blue.Light.ON_ERROR_CONTAINER,
    background = AppTheme.Blue.Light.BACKGROUND,
    onBackground = AppTheme.Blue.Light.ON_BACKGROUND,
    surface = AppTheme.Blue.Light.SURFACE,
    onSurface = AppTheme.Blue.Light.ON_SURFACE,
    surfaceVariant = AppTheme.Blue.Light.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Blue.Light.ON_SURFACE_VARIANT,
    outline = AppTheme.Blue.Light.OUTLINE,
    inverseOnSurface = AppTheme.Blue.Light.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Blue.Light.INVERSE_SURFACE,
    inversePrimary = AppTheme.Blue.Light.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Blue.Light.SURFACE_TINT,
)


val DarkBlueColors = darkColorScheme(
    primary = AppTheme.Blue.Dark.PRIMARY,
    onPrimary = AppTheme.Blue.Dark.ON_PRIMARY,
    primaryContainer = AppTheme.Blue.Dark.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Blue.Dark.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Blue.Dark.SECONDARY,
    onSecondary = AppTheme.Blue.Dark.ON_SECONDARY,
    secondaryContainer = AppTheme.Blue.Dark.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Blue.Dark.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Blue.Dark.TERTIARY,
    onTertiary = AppTheme.Blue.Dark.ON_TERTIARY,
    tertiaryContainer = AppTheme.Blue.Dark.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Blue.Dark.ON_TERTIARY_CONTAINER,
    error = AppTheme.Blue.Dark.ERROR,
    errorContainer = AppTheme.Blue.Dark.ERROR_CONTAINER,
    onError = AppTheme.Blue.Dark.ON_ERROR,
    onErrorContainer = AppTheme.Blue.Dark.ON_ERROR_CONTAINER,
    background = AppTheme.Blue.Dark.BACKGROUND,
    onBackground = AppTheme.Blue.Dark.ON_BACKGROUND,
    surface = AppTheme.Blue.Dark.SURFACE,
    onSurface = AppTheme.Blue.Dark.ON_SURFACE,
    surfaceVariant = AppTheme.Blue.Dark.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Blue.Dark.ON_SURFACE_VARIANT,
    outline = AppTheme.Blue.Dark.OUTLINE,
    inverseOnSurface = AppTheme.Blue.Dark.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Blue.Dark.INVERSE_SURFACE,
    inversePrimary = AppTheme.Blue.Dark.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Blue.Dark.SURFACE_TINT,
)


val LightRedColors = lightColorScheme(
    primary = AppTheme.Red.Light.PRIMARY,
    onPrimary = AppTheme.Red.Light.ON_PRIMARY,
    primaryContainer = AppTheme.Red.Light.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Red.Light.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Red.Light.SECONDARY,
    onSecondary = AppTheme.Red.Light.ON_SECONDARY,
    secondaryContainer = AppTheme.Red.Light.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Red.Light.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Red.Light.TERTIARY,
    onTertiary = AppTheme.Red.Light.ON_TERTIARY,
    tertiaryContainer = AppTheme.Red.Light.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Red.Light.ON_TERTIARY_CONTAINER,
    error = AppTheme.Red.Light.ERROR,
    errorContainer = AppTheme.Red.Light.ERROR_CONTAINER,
    onError = AppTheme.Red.Light.ON_ERROR,
    onErrorContainer = AppTheme.Red.Light.ON_ERROR_CONTAINER,
    background = AppTheme.Red.Light.BACKGROUND,
    onBackground = AppTheme.Red.Light.ON_BACKGROUND,
    surface = AppTheme.Red.Light.SURFACE,
    onSurface = AppTheme.Red.Light.ON_SURFACE,
    surfaceVariant = AppTheme.Red.Light.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Red.Light.ON_SURFACE_VARIANT,
    outline = AppTheme.Red.Light.OUTLINE,
    inverseOnSurface = AppTheme.Red.Light.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Red.Light.INVERSE_SURFACE,
    inversePrimary = AppTheme.Red.Light.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Red.Light.SURFACE_TINT,
)


val DarkRedColors = darkColorScheme(
    primary = AppTheme.Red.Dark.PRIMARY,
    onPrimary = AppTheme.Red.Dark.ON_PRIMARY,
    primaryContainer = AppTheme.Red.Dark.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Red.Dark.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Red.Dark.SECONDARY,
    onSecondary = AppTheme.Red.Dark.ON_SECONDARY,
    secondaryContainer = AppTheme.Red.Dark.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Red.Dark.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Red.Dark.TERTIARY,
    onTertiary = AppTheme.Red.Dark.ON_TERTIARY,
    tertiaryContainer = AppTheme.Red.Dark.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Red.Dark.ON_TERTIARY_CONTAINER,
    error = AppTheme.Red.Dark.ERROR,
    errorContainer = AppTheme.Red.Dark.ERROR_CONTAINER,
    onError = AppTheme.Red.Dark.ON_ERROR,
    onErrorContainer = AppTheme.Red.Dark.ON_ERROR_CONTAINER,
    background = AppTheme.Red.Dark.BACKGROUND,
    onBackground = AppTheme.Red.Dark.ON_BACKGROUND,
    surface = AppTheme.Red.Dark.SURFACE,
    onSurface = AppTheme.Red.Dark.ON_SURFACE,
    surfaceVariant = AppTheme.Red.Dark.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Red.Dark.ON_SURFACE_VARIANT,
    outline = AppTheme.Red.Dark.OUTLINE,
    inverseOnSurface = AppTheme.Red.Dark.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Red.Dark.INVERSE_SURFACE,
    inversePrimary = AppTheme.Red.Dark.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Red.Dark.SURFACE_TINT,
)

val LightPurpleColors = lightColorScheme(
    primary = AppTheme.Purple.Light.PRIMARY,
    onPrimary = AppTheme.Purple.Light.ON_PRIMARY,
    primaryContainer = AppTheme.Purple.Light.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Purple.Light.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Purple.Light.SECONDARY,
    onSecondary = AppTheme.Purple.Light.ON_SECONDARY,
    secondaryContainer = AppTheme.Purple.Light.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Purple.Light.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Purple.Light.TERTIARY,
    onTertiary = AppTheme.Purple.Light.ON_TERTIARY,
    tertiaryContainer = AppTheme.Purple.Light.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Purple.Light.ON_TERTIARY_CONTAINER,
    error = AppTheme.Purple.Light.ERROR,
    errorContainer = AppTheme.Purple.Light.ERROR_CONTAINER,
    onError = AppTheme.Purple.Light.ON_ERROR,
    onErrorContainer = AppTheme.Purple.Light.ON_ERROR_CONTAINER,
    background = AppTheme.Purple.Light.BACKGROUND,
    onBackground = AppTheme.Purple.Light.ON_BACKGROUND,
    surface = AppTheme.Purple.Light.SURFACE,
    onSurface = AppTheme.Purple.Light.ON_SURFACE,
    surfaceVariant = AppTheme.Purple.Light.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Purple.Light.ON_SURFACE_VARIANT,
    outline = AppTheme.Purple.Light.OUTLINE,
    inverseOnSurface = AppTheme.Purple.Light.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Purple.Light.INVERSE_SURFACE,
    inversePrimary = AppTheme.Purple.Light.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Purple.Light.SURFACE_TINT,
)


val DarkPurpleColors = darkColorScheme(
    primary = AppTheme.Purple.Dark.PRIMARY,
    onPrimary = AppTheme.Purple.Dark.ON_PRIMARY,
    primaryContainer = AppTheme.Purple.Dark.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Purple.Dark.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Purple.Dark.SECONDARY,
    onSecondary = AppTheme.Purple.Dark.ON_SECONDARY,
    secondaryContainer = AppTheme.Purple.Dark.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Purple.Dark.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Purple.Dark.TERTIARY,
    onTertiary = AppTheme.Purple.Dark.ON_TERTIARY,
    tertiaryContainer = AppTheme.Purple.Dark.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Purple.Dark.ON_TERTIARY_CONTAINER,
    error = AppTheme.Purple.Dark.ERROR,
    errorContainer = AppTheme.Purple.Dark.ERROR_CONTAINER,
    onError = AppTheme.Purple.Dark.ON_ERROR,
    onErrorContainer = AppTheme.Purple.Dark.ON_ERROR_CONTAINER,
    background = AppTheme.Purple.Dark.BACKGROUND,
    onBackground = AppTheme.Purple.Dark.ON_BACKGROUND,
    surface = AppTheme.Purple.Dark.SURFACE,
    onSurface = AppTheme.Purple.Dark.ON_SURFACE,
    surfaceVariant = AppTheme.Purple.Dark.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Purple.Dark.ON_SURFACE_VARIANT,
    outline = AppTheme.Purple.Dark.OUTLINE,
    inverseOnSurface = AppTheme.Purple.Dark.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Purple.Dark.INVERSE_SURFACE,
    inversePrimary = AppTheme.Purple.Dark.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Purple.Dark.SURFACE_TINT,
)

val LightYellowColors = lightColorScheme(
    primary = AppTheme.Yellow.Light.PRIMARY,
    onPrimary = AppTheme.Yellow.Light.ON_PRIMARY,
    primaryContainer = AppTheme.Yellow.Light.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Yellow.Light.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Yellow.Light.SECONDARY,
    onSecondary = AppTheme.Yellow.Light.ON_SECONDARY,
    secondaryContainer = AppTheme.Yellow.Light.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Yellow.Light.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Yellow.Light.TERTIARY,
    onTertiary = AppTheme.Yellow.Light.ON_TERTIARY,
    tertiaryContainer = AppTheme.Yellow.Light.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Yellow.Light.ON_TERTIARY_CONTAINER,
    error = AppTheme.Yellow.Light.ERROR,
    errorContainer = AppTheme.Yellow.Light.ERROR_CONTAINER,
    onError = AppTheme.Yellow.Light.ON_ERROR,
    onErrorContainer = AppTheme.Yellow.Light.ON_ERROR_CONTAINER,
    background = AppTheme.Yellow.Light.BACKGROUND,
    onBackground = AppTheme.Yellow.Light.ON_BACKGROUND,
    surface = AppTheme.Yellow.Light.SURFACE,
    onSurface = AppTheme.Yellow.Light.ON_SURFACE,
    surfaceVariant = AppTheme.Yellow.Light.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Yellow.Light.ON_SURFACE_VARIANT,
    outline = AppTheme.Yellow.Light.OUTLINE,
    inverseOnSurface = AppTheme.Yellow.Light.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Yellow.Light.INVERSE_SURFACE,
    inversePrimary = AppTheme.Yellow.Light.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Yellow.Light.SURFACE_TINT,
)


val DarkYellowColors = darkColorScheme(
    primary = AppTheme.Yellow.Dark.PRIMARY,
    onPrimary = AppTheme.Yellow.Dark.ON_PRIMARY,
    primaryContainer = AppTheme.Yellow.Dark.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Yellow.Dark.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Yellow.Dark.SECONDARY,
    onSecondary = AppTheme.Yellow.Dark.ON_SECONDARY,
    secondaryContainer = AppTheme.Yellow.Dark.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Yellow.Dark.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Yellow.Dark.TERTIARY,
    onTertiary = AppTheme.Yellow.Dark.ON_TERTIARY,
    tertiaryContainer = AppTheme.Yellow.Dark.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Yellow.Dark.ON_TERTIARY_CONTAINER,
    error = AppTheme.Yellow.Dark.ERROR,
    errorContainer = AppTheme.Yellow.Dark.ERROR_CONTAINER,
    onError = AppTheme.Yellow.Dark.ON_ERROR,
    onErrorContainer = AppTheme.Yellow.Dark.ON_ERROR_CONTAINER,
    background = AppTheme.Yellow.Dark.BACKGROUND,
    onBackground = AppTheme.Yellow.Dark.ON_BACKGROUND,
    surface = AppTheme.Yellow.Dark.SURFACE,
    onSurface = AppTheme.Yellow.Dark.ON_SURFACE,
    surfaceVariant = AppTheme.Yellow.Dark.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Yellow.Dark.ON_SURFACE_VARIANT,
    outline = AppTheme.Yellow.Dark.OUTLINE,
    inverseOnSurface = AppTheme.Yellow.Dark.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Yellow.Dark.INVERSE_SURFACE,
    inversePrimary = AppTheme.Yellow.Dark.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Yellow.Dark.SURFACE_TINT,
)


val LightOrangeColors = lightColorScheme(
    primary = AppTheme.Orange.Light.PRIMARY,
    onPrimary = AppTheme.Orange.Light.ON_PRIMARY,
    primaryContainer = AppTheme.Orange.Light.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Orange.Light.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Orange.Light.SECONDARY,
    onSecondary = AppTheme.Orange.Light.ON_SECONDARY,
    secondaryContainer = AppTheme.Orange.Light.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Orange.Light.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Orange.Light.TERTIARY,
    onTertiary = AppTheme.Orange.Light.ON_TERTIARY,
    tertiaryContainer = AppTheme.Orange.Light.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Orange.Light.ON_TERTIARY_CONTAINER,
    error = AppTheme.Orange.Light.ERROR,
    errorContainer = AppTheme.Orange.Light.ERROR_CONTAINER,
    onError = AppTheme.Orange.Light.ON_ERROR,
    onErrorContainer = AppTheme.Orange.Light.ON_ERROR_CONTAINER,
    background = AppTheme.Orange.Light.BACKGROUND,
    onBackground = AppTheme.Orange.Light.ON_BACKGROUND,
    surface = AppTheme.Orange.Light.SURFACE,
    onSurface = AppTheme.Orange.Light.ON_SURFACE,
    surfaceVariant = AppTheme.Orange.Light.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Orange.Light.ON_SURFACE_VARIANT,
    outline = AppTheme.Orange.Light.OUTLINE,
    inverseOnSurface = AppTheme.Orange.Light.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Orange.Light.INVERSE_SURFACE,
    inversePrimary = AppTheme.Orange.Light.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Orange.Light.SURFACE_TINT,
)


val DarkOrangeColors = darkColorScheme(
    primary = AppTheme.Orange.Dark.PRIMARY,
    onPrimary = AppTheme.Orange.Dark.ON_PRIMARY,
    primaryContainer = AppTheme.Orange.Dark.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Orange.Dark.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Orange.Dark.SECONDARY,
    onSecondary = AppTheme.Orange.Dark.ON_SECONDARY,
    secondaryContainer = AppTheme.Orange.Dark.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Orange.Dark.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Orange.Dark.TERTIARY,
    onTertiary = AppTheme.Orange.Dark.ON_TERTIARY,
    tertiaryContainer = AppTheme.Orange.Dark.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Orange.Dark.ON_TERTIARY_CONTAINER,
    error = AppTheme.Orange.Dark.ERROR,
    errorContainer = AppTheme.Orange.Dark.ERROR_CONTAINER,
    onError = AppTheme.Orange.Dark.ON_ERROR,
    onErrorContainer = AppTheme.Orange.Dark.ON_ERROR_CONTAINER,
    background = AppTheme.Orange.Dark.BACKGROUND,
    onBackground = AppTheme.Orange.Dark.ON_BACKGROUND,
    surface = AppTheme.Orange.Dark.SURFACE,
    onSurface = AppTheme.Orange.Dark.ON_SURFACE,
    surfaceVariant = AppTheme.Orange.Dark.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Orange.Dark.ON_SURFACE_VARIANT,
    outline = AppTheme.Orange.Dark.OUTLINE,
    inverseOnSurface = AppTheme.Orange.Dark.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Orange.Dark.INVERSE_SURFACE,
    inversePrimary = AppTheme.Orange.Dark.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Orange.Dark.SURFACE_TINT,
)

val LightGreenColors = lightColorScheme(
    primary = AppTheme.Green.Light.PRIMARY,
    onPrimary = AppTheme.Green.Light.ON_PRIMARY,
    primaryContainer = AppTheme.Green.Light.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Green.Light.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Green.Light.SECONDARY,
    onSecondary = AppTheme.Green.Light.ON_SECONDARY,
    secondaryContainer = AppTheme.Green.Light.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Green.Light.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Green.Light.TERTIARY,
    onTertiary = AppTheme.Green.Light.ON_TERTIARY,
    tertiaryContainer = AppTheme.Green.Light.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Green.Light.ON_TERTIARY_CONTAINER,
    error = AppTheme.Green.Light.ERROR,
    errorContainer = AppTheme.Green.Light.ERROR_CONTAINER,
    onError = AppTheme.Green.Light.ON_ERROR,
    onErrorContainer = AppTheme.Green.Light.ON_ERROR_CONTAINER,
    background = AppTheme.Green.Light.BACKGROUND,
    onBackground = AppTheme.Green.Light.ON_BACKGROUND,
    surface = AppTheme.Green.Light.SURFACE,
    onSurface = AppTheme.Green.Light.ON_SURFACE,
    surfaceVariant = AppTheme.Green.Light.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Green.Light.ON_SURFACE_VARIANT,
    outline = AppTheme.Green.Light.OUTLINE,
    inverseOnSurface = AppTheme.Green.Light.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Green.Light.INVERSE_SURFACE,
    inversePrimary = AppTheme.Green.Light.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Green.Light.SURFACE_TINT,
)


val DarkGreenColors = darkColorScheme(
    primary = AppTheme.Green.Dark.PRIMARY,
    onPrimary = AppTheme.Green.Dark.ON_PRIMARY,
    primaryContainer = AppTheme.Green.Dark.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Green.Dark.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Green.Dark.SECONDARY,
    onSecondary = AppTheme.Green.Dark.ON_SECONDARY,
    secondaryContainer = AppTheme.Green.Dark.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Green.Dark.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Green.Dark.TERTIARY,
    onTertiary = AppTheme.Green.Dark.ON_TERTIARY,
    tertiaryContainer = AppTheme.Green.Dark.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Green.Dark.ON_TERTIARY_CONTAINER,
    error = AppTheme.Green.Dark.ERROR,
    errorContainer = AppTheme.Green.Dark.ERROR_CONTAINER,
    onError = AppTheme.Green.Dark.ON_ERROR,
    onErrorContainer = AppTheme.Green.Dark.ON_ERROR_CONTAINER,
    background = AppTheme.Green.Dark.BACKGROUND,
    onBackground = AppTheme.Green.Dark.ON_BACKGROUND,
    surface = AppTheme.Green.Dark.SURFACE,
    onSurface = AppTheme.Green.Dark.ON_SURFACE,
    surfaceVariant = AppTheme.Green.Dark.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Green.Dark.ON_SURFACE_VARIANT,
    outline = AppTheme.Green.Dark.OUTLINE,
    inverseOnSurface = AppTheme.Green.Dark.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Green.Dark.INVERSE_SURFACE,
    inversePrimary = AppTheme.Green.Dark.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Green.Dark.SURFACE_TINT,
)

val LightPinkColors = lightColorScheme(
    primary = AppTheme.Pink.Light.PRIMARY,
    onPrimary = AppTheme.Pink.Light.ON_PRIMARY,
    primaryContainer = AppTheme.Pink.Light.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Pink.Light.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Pink.Light.SECONDARY,
    onSecondary = AppTheme.Pink.Light.ON_SECONDARY,
    secondaryContainer = AppTheme.Pink.Light.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Pink.Light.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Pink.Light.TERTIARY,
    onTertiary = AppTheme.Pink.Light.ON_TERTIARY,
    tertiaryContainer = AppTheme.Pink.Light.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Pink.Light.ON_TERTIARY_CONTAINER,
    error = AppTheme.Pink.Light.ERROR,
    errorContainer = AppTheme.Pink.Light.ERROR_CONTAINER,
    onError = AppTheme.Pink.Light.ON_ERROR,
    onErrorContainer = AppTheme.Pink.Light.ON_ERROR_CONTAINER,
    background = AppTheme.Pink.Light.BACKGROUND,
    onBackground = AppTheme.Pink.Light.ON_BACKGROUND,
    surface = AppTheme.Pink.Light.SURFACE,
    onSurface = AppTheme.Pink.Light.ON_SURFACE,
    surfaceVariant = AppTheme.Pink.Light.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Pink.Light.ON_SURFACE_VARIANT,
    outline = AppTheme.Pink.Light.OUTLINE,
    inverseOnSurface = AppTheme.Pink.Light.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Pink.Light.INVERSE_SURFACE,
    inversePrimary = AppTheme.Pink.Light.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Pink.Light.SURFACE_TINT,
)


val DarkPinkColors = darkColorScheme(
    primary = AppTheme.Pink.Dark.PRIMARY,
    onPrimary = AppTheme.Pink.Dark.ON_PRIMARY,
    primaryContainer = AppTheme.Pink.Dark.PRIMARY_CONTAINER,
    onPrimaryContainer = AppTheme.Pink.Dark.ON_PRIMARY_CONTAINER,
    secondary = AppTheme.Pink.Dark.SECONDARY,
    onSecondary = AppTheme.Pink.Dark.ON_SECONDARY,
    secondaryContainer = AppTheme.Pink.Dark.SECONDARY_CONTAINER,
    onSecondaryContainer = AppTheme.Pink.Dark.ON_SECONDARY_CONTAINER,
    tertiary = AppTheme.Pink.Dark.TERTIARY,
    onTertiary = AppTheme.Pink.Dark.ON_TERTIARY,
    tertiaryContainer = AppTheme.Pink.Dark.TERTIARY_CONTAINER,
    onTertiaryContainer = AppTheme.Pink.Dark.ON_TERTIARY_CONTAINER,
    error = AppTheme.Pink.Dark.ERROR,
    errorContainer = AppTheme.Pink.Dark.ERROR_CONTAINER,
    onError = AppTheme.Pink.Dark.ON_ERROR,
    onErrorContainer = AppTheme.Pink.Dark.ON_ERROR_CONTAINER,
    background = AppTheme.Pink.Dark.BACKGROUND,
    onBackground = AppTheme.Pink.Dark.ON_BACKGROUND,
    surface = AppTheme.Pink.Dark.SURFACE,
    onSurface = AppTheme.Pink.Dark.ON_SURFACE,
    surfaceVariant = AppTheme.Pink.Dark.SURFACE_VARIANT,
    onSurfaceVariant = AppTheme.Pink.Dark.ON_SURFACE_VARIANT,
    outline = AppTheme.Pink.Dark.OUTLINE,
    inverseOnSurface = AppTheme.Pink.Dark.INVERSE_ON_SURFACE,
    inverseSurface = AppTheme.Pink.Dark.INVERSE_SURFACE,
    inversePrimary = AppTheme.Pink.Dark.INVERSE_PRIMARY,
    surfaceTint = AppTheme.Pink.Dark.SURFACE_TINT,
)

fun getMochaScheme(accent: Color): ColorScheme {

    return darkColorScheme(
        background = AppTheme.CatppuccinMocha.BACKGROUND,
        primary = accent,
        onPrimary = AppTheme.CatppuccinMocha.ON_PRIMARY,
        surface = AppTheme.CatppuccinMocha.SURFACE,
        onSurface = AppTheme.CatppuccinMocha.ON_SURFACE,
        surfaceVariant = AppTheme.CatppuccinMocha.SURFACE_VARIANT,
        onSurfaceVariant = AppTheme.CatppuccinMocha.ON_SURFACE_VARIANT
    )
}

fun getMacchiatoScheme(accent: Color): ColorScheme {
    return darkColorScheme(
        background = AppTheme.CatppuccinMacchiato.BACKGROUND,
        primary = accent,
        onPrimary = AppTheme.CatppuccinMacchiato.ON_PRIMARY,
        surface = AppTheme.CatppuccinMacchiato.SURFACE,
        onSurface = AppTheme.CatppuccinMacchiato.ON_SURFACE,
        surfaceVariant = AppTheme.CatppuccinMacchiato.SURFACE_VARIANT,
        onSurfaceVariant = AppTheme.CatppuccinMacchiato.ON_SURFACE_VARIANT
    )
}

fun getFrappeScheme(accent: Color): ColorScheme {
    return darkColorScheme(
        background = AppTheme.CatppuccinFrappe.BACKGROUND,
        primary = accent,
        onPrimary = AppTheme.CatppuccinFrappe.ON_PRIMARY,
        surface = AppTheme.CatppuccinFrappe.SURFACE,
        onSurface = AppTheme.CatppuccinFrappe.ON_SURFACE,
        surfaceVariant = AppTheme.CatppuccinFrappe.SURFACE_VARIANT,
        onSurfaceVariant = AppTheme.CatppuccinFrappe.ON_SURFACE_VARIANT
    )
}

fun getLatteScheme(accent: Color): ColorScheme {
    return darkColorScheme(
        background = AppTheme.CatppuccinLatte.BACKGROUND,
        primary = accent,
        onPrimary = AppTheme.CatppuccinLatte.ON_PRIMARY,
        surface = AppTheme.CatppuccinLatte.SURFACE,
        onSurface = AppTheme.CatppuccinLatte.ON_SURFACE,
        surfaceVariant = AppTheme.CatppuccinLatte.SURFACE_VARIANT,
        onSurfaceVariant = AppTheme.CatppuccinLatte.ON_SURFACE_VARIANT
    )
}

fun getPantherScheme(accent: Color): ColorScheme {
    return darkColorScheme(
        background = AppTheme.WhiskersPanther.BACKGROUND,
        primary = accent,
        onPrimary = AppTheme.WhiskersPanther.ON_PRIMARY,
        surface = AppTheme.WhiskersPanther.SURFACE,
        onSurface = AppTheme.WhiskersPanther.ON_SURFACE,
        surfaceVariant = AppTheme.WhiskersPanther.SURFACE_VARIANT,
        onSurfaceVariant = AppTheme.WhiskersPanther.ON_SURFACE_VARIANT
    )
}

fun getTigerScheme(accent: Color): ColorScheme {
    return darkColorScheme(
        background = AppTheme.WhiskersTiger.BACKGROUND,
        primary = accent,
        onPrimary = AppTheme.WhiskersTiger.ON_PRIMARY,
        surface = AppTheme.WhiskersTiger.SURFACE,
        onSurface = AppTheme.WhiskersTiger.ON_SURFACE,
        surfaceVariant = AppTheme.WhiskersTiger.SURFACE_VARIANT,
        onSurfaceVariant = AppTheme.WhiskersTiger.ON_SURFACE_VARIANT
    )
}
